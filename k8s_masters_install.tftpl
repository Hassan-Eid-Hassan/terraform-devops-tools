#!/bin/bash

K8S_REPO_URL="https://pkgs.k8s.io/core:/stable:/v1.30/rpm/"
K8S_GPG_KEY="https://pkgs.k8s.io/core:/stable:/v1.30/rpm/repodata/repomd.xml.key"
AUTO_HASH_SWAP="false"
HOME="/root"

# Workspace

sudo cd $HOME

# Step 1: Removing old versions...
sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine podman runc kube* -y

# Step 2: Disabling SELinux...
sudo setenforce 0
sudo sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

# Step 3: Setting bridged packets to traverse iptables rules...
sudo cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sudo echo 1 > /proc/sys/net/ipv4/ip_forward
sudo sysctl --system

# Step 4: Disabling all memory swaps...
sudo swapoff -a
if [ $AUTO_HASH_SWAP == "true" ]; then sudo sed -i '/\sswap\s/s/^/#/' /etc/fstab; fi 
# Please check any swap entries in /etc/fstab.

# Step 5: Enabling transparent masquerading and VxLAN...
sudo modprobe br_netfilter

# install Docker
sudo yum install -y yum-utils dnf iproute-tc wget
sudo yum install -y docker
sudo systemctl enable --now docker

# configure Docker
sudo cat <<EOF > /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  }
}
EOF

sudo systemctl restart docker

# install Kubernetes
sudo cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=$K8S_REPO_URL
enabled=1
gpgcheck=0
gpgkey=$K8S_GPG_KEY
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
EOF

sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
sudo systemctl enable --now kubelet

# Configure containerd
sudo mkdir -p /etc/containerd
sudo containerd config default > /etc/containerd/config.toml
sudo sed -i 's#SystemdCgroup = false#SystemdCgroup = true#g' /etc/containerd/config.toml
sudo systemctl restart containerd

# Join the cluster
sleep 30 # just to ensure thet the master node created and uploaded the join command

INSTANCE_ID=$(TOKEN=`sudo curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` && sudo curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
INSTANCE_NAME="${k8s_cluster_name}-master-$INSTANCE_ID"
sudo aws ec2 create-tags --resources $INSTANCE_ID --tags Key=Name,Value=$INSTANCE_NAME --region ${k8s_region_code}

sudo aws s3 cp s3://${k8s_cluster_name}-bucket/masters_join_command.sh /tmp/masters_join_command.sh
runuser -u root -- sh /tmp/masters_join_command.sh

runuser -u root -- sudo mkdir -p $HOME/.kube
runuser -u root -- sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
runuser -u root -- sudo chown $(id -u):$(id -g) $HOME/.kube/config